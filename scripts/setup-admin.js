const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const [email, password] = process.argv.slice(2);

if (!email || !password) {
  console.error('‚ùå Por favor, forne√ßa email e senha como argumentos.');
  console.log('Exemplo: node setup-admin.js admin@example.com suavez123');
  process.exit(1);
}

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('As vari√°veis de ambiente do Supabase n√£o est√£o configuradas.');
  process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

async function createAdminUser(email, password) {
  console.log('üîÑ Iniciando configura√ß√£o do admin...');
  const { data, error } = await supabaseAdmin.auth.admin.createUser({
    email: email,
    password: password,
    email_confirm: true,
  });

  if (error) {
    if (error.message.includes('User already exists')) {
        console.warn(`AVISO: O usu√°rio com o email ${email} j√° existe na autentica√ß√£o.`);
        // Tenta obter o usu√°rio existente para continuar o processo
        const { data: { users }, error: listError } = await supabaseAdmin.auth.admin.listUsers();
        if (listError) {
          throw new Error(`Erro ao listar usu√°rios: ${listError.message}`);
        }
        const existingUser = users.find(u => u.email === email);
        if (!existingUser) {
          throw new Error(`N√£o foi poss√≠vel encontrar o usu√°rio existente ${email} na lista de usu√°rios.`);
        }
        console.log(`Encontrado usu√°rio existente: ${existingUser.email} com ID: ${existingUser.id}`);
        return existingUser;
    }
    throw error;
  }
  console.log('‚úÖ Usu√°rio admin criado com sucesso na autentica√ß√£o!');
  return data.user;
}

async function addToAdminsTable(user) {
    const { error } = await supabaseAdmin.from('admins').insert([{ 
        id: user.id
    }]);

    if (error) {
        if (error.code === '23505') { // C√≥digo de viola√ß√£o de unicidade
             console.warn(`AVISO: O usu√°rio ${user.email} j√° existe na tabela 'admins'.`);
        } else {
            throw new Error(`Falha ao inserir o admin na tabela 'admins': ${error.message}`);
        }
    } else {
        console.log(`‚úÖ Usu√°rio ${user.email} inserido na tabela 'admins' com sucesso!`);
    }
}

async function main() {
  try {
    const user = await createAdminUser(email, password);
    if(user){
        await addToAdminsTable(user);
    } else {
        throw new Error("N√£o foi poss√≠vel criar ou obter o usu√°rio de autentica√ß√£o.");
    }
    
    console.log('\nüéâ Configura√ß√£o de admin conclu√≠da!');
    console.log('\nCredenciais de acesso:');
    console.log(`Email: ${email}`);
    console.log(`Senha: ${password}`);

  } catch (error) {
    console.error('\n‚ùå Erro durante a configura√ß√£o do admin:', error.message);
  }
}

main(); 